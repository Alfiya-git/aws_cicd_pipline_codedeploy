version: 0.2

phases:
  pre_build:
    commands:
      - echo "started"

  build:
    commands:
      - |
        a=$(date "+%d-%m-%y-%H%M")
        di=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=Prod*" "Name=instance-state-name,Values=running" | grep InstanceId | awk '{print $2}' | sed 's/[",]//g')
        echo "$di"
        aws ec2 create-image --instance-id $di --name b-$a --description testing
        echo "image created"
        echo "checking for AMI status; this may take some time..."

        while true; do
          aa=$(aws ec2 describe-images --filters "Name=name,Values=b-$a" | grep "State" | grep "," | awk '{print $2}' | sed 's/[",]//g')
          echo "$aa"

          if [ "$aa" = "failed" ]; then
            echo "AMI creation failed"
            exit 1
          elif [ "$aa" = "available" ]; then
            echo "AMI is available"
            break
          elif [ "$aa" = "pending" ]; then
            echo "AMI creation is pending; checking again in 20 seconds"
            sleep 20
          else
            sleep 10
            echo "AMI creation is in progress; checking again"
          fi
        done

        id=$(aws ec2 describe-images --filters "Name=name,Values=b-$a" | grep "ImageId" | grep "," | awk '{print $2}' | sed 's/[",]//g')
        aws ec2 run-instances --image-id $id --instance-type t2.micro --key-name demo --subnet-id subnet-0acad34be64e11c77 --security-group-ids sg-0afdd16d5a084eb2a --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=Prod-$a}]"
        di=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=Prod-$a" | grep InstanceId | awk '{print $2}' | sed 's/[",]//g')
        ii=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=Prod-$a" | grep PrivateIpAddress | head -1 | grep  | awk '{print $2}' | sed 's/[",]//g')
        echo $ii
        ar=$(aws elbv2 describe-target-groups --name demo | grep "TargetGroupArn" | awk '{print $2}' | sed 's/[",]//g')
        echo $ar
        targets=$(aws elbv2 describe-target-health --target-group-arn $ar --query 'TargetHealthDescriptions[*].Target.Id' --output text)
        echo "waiting for server to show up eta 1 min"
        sleep 60
        aws elbv2 register-targets --target-group-arn $ar --targets Id=$di
        sleep 20
        # Deregister each target from the target group
        for target in $targets; do
          aws elbv2 deregister-targets --target-group-arn $ar --targets Id=$target
        done      

        aws secretsmanager get-secret-value --secret-id arn:aws:secretsmanager:ap-south-1:318988877498:secret:pemkey-k3bJr6 --query SecretString --output text > /tmp/ssh_key.pem
        chmod 400 /tmp/ssh_key.pem
        cat /tmp/ssh_key.pem
        outer_ssh="ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem ec2-user@35.154.71.243"

        # Construct the complete command with dynamic IP and execute it
        command_to_execute="$outer_ssh \"ssh -i /home/ec2-user/demo.pem ec2-user@$ii 'sudo git -C /var/www/html/ pull origin main'\""
        eval "$command_to_execute"

      
        

      
